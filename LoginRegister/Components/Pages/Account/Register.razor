@page "/register"

@using LoginRegister.Models.ViewModels
@using LoginRegister.Services;
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject IUserService userService;
@inject NavigationManager navigationManager;
<EditForm class="form-container bg-white p-8 rounded-lg shadow-lg max-w-md mx-auto" Model="@Model" OnValidSubmit="Authenticate" FormName="RegisterForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-red-500 mb-4" />
    <h3 class="text-3xl font-semibold text-center text-gray-800 mb-6">Register</h3>

   
    <div class="mb-4">
        <label for="FirstName" class="block text-sm font-medium text-gray-700">First Name</label>
        <InputText id="FirstName" class="mt-2 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" @bind-Value="Model.FirstName" placeholder="Enter your First Name" />
        <ValidationMessage For="()=> Model.FirstName" class="text-sm text-red-500 mt-1" />
    </div>
    <div class="mb-4">
        <label for="LastName" class="block text-sm font-medium text-gray-700">Last Name</label>
        <InputText id="LastName" class="mt-2 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" @bind-Value="Model.LastName" placeholder="Enter your Last Name" />
        <ValidationMessage For="()=> Model.LastName" class="text-sm text-red-500 mt-1" />
    </div>
    <!-- Username Field -->
    <div class="mb-4">
        <label for="UserName" class="block text-sm font-medium text-gray-700">Username</label>
        <InputText id="UserName" class="mt-2 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" @bind-Value="Model.UserName" placeholder="Enter your username" />
        <ValidationMessage For="()=> Model.UserName" class="text-sm text-red-500 mt-1" />
    </div>
    <!-- Password Field -->
    <div class="mb-4">
        <label for="Password" class="block text-sm font-medium text-gray-700">Password</label>
        <InputText id="Password" class="mt-2 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" @bind-Value="Model.Password" type="password" placeholder="Enter your password" />
        <ValidationMessage For="()=> Model.Password" class="text-sm text-red-500 mt-1" />
    </div>

    <!-- Submit Button -->
    <div class="mb-4">
        <button type="submit" class="w-full py-2 px-4 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50">
            <i class="bi bi-chevron-right mr-2"></i> Register
        </button>
    </div>

    <!-- Error Message -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-4 text-red-500 text-center">
            @errorMessage
        </div>
    }

    <!-- Login Link -->
    <div class="text-center mt-4">
        <a href="/login" class="text-indigo-600 hover:text-indigo-700 text-sm">Already have an account? Login</a>
    </div>
</EditForm>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public RegisterViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var success = await userService.Register(Model.UserName,Model.FirstName,Model.LastName, Model.Password);
        if (success == false)
        {
            errorMessage = "something went wrong";
            return;
        }
        // if (User == null)
        // {
        //     errorMessage = "Invalid UserName or Password";
        //     return;
        // }
        // var claims = new List<Claim>
        // {
        //     new Claim(ClaimTypes.Name, Model.UserName),
        //     new Claim(ClaimTypes.Role, User.Role)
        // };
        // var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        // var principal = new ClaimsPrincipal(identity);
        // await HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/login");
    }
}

